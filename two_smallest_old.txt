; Marks the two smallest charachters
; ex. #  a-oo  b-o  c-oooo  d-ooo $
; Mark the first two as smallest (~) and second smallest (&)
; only works for two speaces in between

0 - * r 1
0 * * r *

1 _ * l 2
1 * * r *

2 o x r 3
2 - ~ r 10
2 x * l *

3 - * r 4
3 * * r *

4 o x l 5
4 _ ~ l 6b
4 x * r *

5 _ * l 6a
5 * * l *

6a _ * l 2

6b - ~ l 7
6b x o l *

7 _ * l 8
7 * * l *

8 _ & l 9

9 - & r 13
9 * o l *

10 _ ~ r 11
10 x o r *

11 - & r 12
11 * * r *

12 _ & r 13
12 * o r *

; Look for next character
13 $ * * halt-accept 
13 - @ l 14
13 * * r *

; Compare to smallest (~)

14 ~ * l 15
14 * * l *

15 o x r 16
15 x * l *
15 ~ * r 22

16 @ * r 17
16 * * r *

17 o x l 14
17 _ ~ l 18
17 x * r *

; smallest

; reset new smallest
18 @ * l 19
18 x o l *

19 & _ l 19&
19 ~ & l 19~
19 # * r 20
19 * * l *

19& & - l 19
19& * * l *

19~ ~ & l 19
19~ x o l *
19~ o * l *

20 @ ~ r 21
20 * * r *

21 ~ * r 13
21 * * r *

; not smallest

; reset old smallest

22 ~ * r 23
22 x o r *

23 @ * r 24
23 * * r *

24 _ * l 25
24 * o r *

; compare to second smallest

25 & * l 26
25 * * l *

26 o x r 27
26 x * l *
26 & * r 34

27 @ * r 28
27 * * r *

28 o x l 29
28 _ & l 30
28 x * r *

29 & * l 26
29 * * l *

; 2nd smallest

; reset new second smallest

30 @ * l 31
30 x o l *

31 & _ l 32
31 * * l *

32 & - r 33
32 * o l *

33 @ & r 13
33 * * r *

; not 2nd smallest

; reset old 2nd smallest

34 & * r 35
34 x o r *

35 @ - r 36
35 * * r *

36 _ * r 13
36 * o r *
