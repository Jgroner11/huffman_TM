; TM that takes in set of characters and their frequencies and outputs the optimal prefix code
; Input format: space separated list of pairs c1 f1 c2 f2 . . . where each fi is the frequency of character ci
;   characters must me members of the acceptable alphabet, currently [a,b,c]
;   frequencies must be whole numbers represented in binary. The limiting factor in how long this program takes is the size of these binary digits so scale down and round if the program is taking to long
;    ex: a 1001 b 111 c 1
;    ex: a 10 b 1 c 100 d 011 
; Output format: space separated list of pairs c1 e1 c2 e2 . . . where ei is the binary encoding for character ci

0 * * * init
;* * * * halt-invalidFormat

control 1 2 r c1
control 2 _ r c2

init * * l *
init _ * l init1

init1 _ # r init2

init2 _ * r init3
init2 * * r *

init3 _ ^ r init4
init3 * * r init2

init4 _ 1 r init5

init5 _ $ l init6

init6 # * r moveWord
init6 * * l *

moveWord _ @ r moveWord1

moveWord1 _ % l move
moveWord1 * * r *

c1 _ - l c11
c1 * * r *

c11 # _ r c12
c11 * * l *

c12 * * l c15
c12 ^ # r c17
c12 _ * r *


c15 _ * l c16

c16 _ # r moveWord

c17 $ * l c18
c17 * * r *

c18 * _ l halt-accept

c2 _ $ l expand
c2 $ _ r *
c2 * * r *

c21 _ 1 r c22 
c21 * * r *

c22 _ $ l c11

expand 1 0 r expand1
expand - * r expand2
expand * * l *

expand1 _ o l expand
expand1 0 1 r *
expand1 * * r *

expand2 _ * l expand3
expand2 $ o r *
expand2 * * r *

expand3 o _ l expand4

expand4 - * r c21
expand4 * o r expand2
expand4 o * l *


move @ _ r move1
move * * l *

move2 $ * l control
move2 * * r *

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
move1 0 @ r m0
move1 1 @ r m1
move1 a @ r ma
move1 b @ r mb
move1 c @ r mc
move1 d @ r md
move1 o @ r mo
move1 ( @ r m(
move1 ) @ r m)
move1 % _ r move2

m0 $ * r m01
m0 * * r *

m01 _ 0 l move 
m01 * * r *

m1 $ * r m11
m1 * * r *

m11 _ 1 l move 
m11 * * r *

ma $ * r ma1
ma * * r *

ma1 _ a l move 
ma1 * * r *

mb $ * r mb1
mb * * r *

mb1 _ b l move 
mb1 * * r *

mc $ * r mc1
mc * * r *

mc1 _ c l move 
mc1 * * r *

md $ * r md1
md * * r *

md1 _ d l move 
md1 * * r *

mo $ * r mo1
mo * * r *

mo1 _ o l move 
mo1 * * r *

m( $ * r m(1
m( * * r *

m(1 _ ( l move 
m(1 * * r *

m) $ * r m)1
m) * * r *

m)1 _ ) l move 
m)1 * * r *
