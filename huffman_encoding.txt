; TM that takes in set of characters and their frequencies and outputs the optimal prefix code
; Input format: space separated list of pairs c1 f1 c2 f2 . . . where each fi is the frequency of character ci
;   characters must me members of the acceptable alphabet, currently [a,b,c]
;   frequencies must be whole numbers represented in binary. The limiting factor in how long this program takes is the size of these binary digits so scale down and round if the program is taking to long
;    ex: a 1001 b 111 c 1
;    ex: a 10 b 1 c 100 d 011 
; Output format: space separated list of pairs c1 e1 c2 e2 . . . where ei is the binary encoding for character ci

0 * * * init
;* * * * halt-invalidFormat

control 1 2 r c1
control 2 _ r c2
control 3 _ r twoSmallest
control 4 5 l find~
control 5 6 r write)
control 6 7 l find~2
control 7 _ r c7
control 8 _ r unmerge
control 9 a r c9
control a _ r ca
control b * r cb

c1 _ ) r c11a
c1 * * r *

c11a _ - l c11

c11 # _ r c12
c11 * * l *

c12 * * l c15
c12 ^ # r c17
c12 _ * r *

c15 _ * l c16

c16 _ # r moveWord

c17 $ * l c18
c17 * * r *

c18 _ $ l c19
c18 * _ r *

c19 # * r c110
c19 * * l *

c110 _ 3 l pullOrder

c2 _ $ l expand
c2 $ _ r *
c2 * * r *

c21 _ 1 r c22 
c21 * * r *

c22 _ $ r c23

c23 _ ( l c11

c7 _ * r c71
c7 $ _ r *
c7 * * r * 

c71 _ * r c72

c72 _ $ l c73

c73 # * r twoSmallest
c73 * * l *

c9 _ ) l c91
c9 * * r *

c91 # * r c92
c91 * * l *

c92 ( * r c93
c92 * * r *

c93 _ % l c94
c93 * * r *

c94 ) _ r copy1
c94 * * l *

ca _ 1 r ca1
ca $ _ r *
ca * * r *

ca1 _ * r ca2

ca2 _ 9 r ca3

ca3 _ $ r ca4

ca4 _ ( l ca5 

ca5 # _ r ca6
ca5 * * l *

ca6 ( * r ca7
ca6 * * r *

ca7 _ 0 l ca8
ca7 * * r *

ca8 _ * r unmerge
ca8 * * l *

cb _ - l reorder1
cb * * r *

init * * l *
init _ * l init1

init1 _ # r init2

init2 _ * r init3
init2 * * r *

init3 _ ^ r init4
init3 * * r init2

init4 _ 1 r init5

init5 _ $ r init6

init6 _ ( l writeLeft

moveWord _ @ r moveWord1

moveWord1 _ % l move
moveWord1 * * r *

pullOrder # * l pullOrder1 

pullOrder1 * * l pullOrder2
pullOrder1 _ * l *

pullOrder2 _ % r pullOrder3
pullOrder2 * * l *

pullOrder3 _ * l moveToFront1
pullOrder3 # _ l moveToFront1
pullOrder3 * * r *

expand 1 0 r expand1
expand - * r expand2
expand * * l *

expand1 _ o l expand
expand1 0 1 r *
expand1 * * r *

expand2 _ * l expand3
expand2 $ o r *
expand2 * * r *

expand3 o _ l expand4

expand4 - * r c21
expand4 * o r expand2
expand4 o * l *

twoSmallest - * r twoSmallest1
twoSmallest * * r *

twoSmallest1 _ * l twoSmallest2
twoSmallest1 * * r *

twoSmallest2 o x r twoSmallest3
twoSmallest2 - ~ r twoSmallest10
twoSmallest2 * * l *

twoSmallest3 - * r twoSmallest4
twoSmallest3 $ _ l prepUnmerge
twoSmallest3 * * r *

twoSmallest4 o x l twoSmallest5
twoSmallest4 _ ~ l twoSmallest6
twoSmallest4 x * r *

twoSmallest5 _ * l twoSmallest2
twoSmallest5 * * l *


twoSmallest6 - ~ l twoSmallest7
twoSmallest6 x o l *

twoSmallest7 _ * l twoSmallest8
twoSmallest7 * * l *

twoSmallest8 * * r twoSmallest8b
twoSmallest8 _ * l *

twoSmallest8b _ & l twoSmallest9 

twoSmallest9 - & r twoSmallest13
twoSmallest9 x o l *
twoSmallest9 o * l *

twoSmallest10 _ ~ r twoSmallest11
twoSmallest10 x o r *

twoSmallest11 - & r twoSmallest12
twoSmallest11 * * r *

twoSmallest12 _ & r twoSmallest13
twoSmallest12 * o r *

twoSmallest13 $ * l merge
twoSmallest13 - @ l twoSmallest14
twoSmallest13 * * r *

twoSmallest14 ~ * l twoSmallest15
twoSmallest14 * * l *

twoSmallest15 o x r twoSmallest16
twoSmallest15 x * l *
twoSmallest15 ~ * r twoSmallest22

twoSmallest16 @ * r twoSmallest17
twoSmallest16 * * r *

twoSmallest17 o x l twoSmallest14
twoSmallest17 _ ~ l twoSmallest18
twoSmallest17 x * r *

twoSmallest18 @ * l twoSmallest19
twoSmallest18 x o l *

twoSmallest19 & _ l twoSmallest19&
twoSmallest19 ~ & l twoSmallest19~
twoSmallest19 # * r twoSmallest20
twoSmallest19 * * l *

twoSmallest19& & - l twoSmallest19
twoSmallest19& * * l *

twoSmallest19~ ~ & l twoSmallest19
twoSmallest19~ x o l *
twoSmallest19~ o * l *

twoSmallest20 @ ~ r twoSmallest21
twoSmallest20 * * r *

twoSmallest21 ~ * r twoSmallest13
twoSmallest21 * * r *

twoSmallest22 ~ * r twoSmallest23
twoSmallest22 x o r *

twoSmallest23 @ * r twoSmallest24
twoSmallest23 * * r *

twoSmallest24 _ * l twoSmallest25
twoSmallest24 * o r *

twoSmallest25 & * l twoSmallest26
twoSmallest25 * * l *

twoSmallest26 o x r twoSmallest27
twoSmallest26 x * l *
twoSmallest26 & * r twoSmallest34

twoSmallest27 @ * r twoSmallest28
twoSmallest27 * * r *

twoSmallest28 o x l twoSmallest29
twoSmallest28 _ & l twoSmallest30
twoSmallest28 x * r *

twoSmallest29 & * l twoSmallest26
twoSmallest29 * * l *

twoSmallest30 @ * l twoSmallest31
twoSmallest30 x o l *

twoSmallest31 & _ l twoSmallest32
twoSmallest31 * * l *

twoSmallest32 & - r twoSmallest33
twoSmallest32 * o l *

twoSmallest33 @ & r twoSmallest13
twoSmallest33 * * r *

twoSmallest34 & * r twoSmallest35
twoSmallest34 x o r *

twoSmallest35 @ - r twoSmallest36
twoSmallest35 * * r *

twoSmallest36 _ * r twoSmallest13
twoSmallest36 * o r *


merge * 4 r write(

write( _ ( l find&
write( * * r *

write) _ ) r write-
write) * * r *

write- _ - l find&2

find& & * l move&
find& * * l *

find&2 & % l move&
find&2 * * l *

move& _ * r move1
move& & % l *
move& * * l *

find~ ~ * l move~
find~ * * l *

find~2 ~ % l move~
find~2 * * l *

move~ _ * r move1
move~ ~ % l *
move~ * * l *

prepUnmerge - _ r prepUnmerge1
prepUnmerge * _ l *

prepUnmerge1 _ 9 r prepUnmerge2

prepUnmerge2 _ $ r prepUnmerge3

prepUnmerge3 _ ( l prepUnmerge4

prepUnmerge4 ) * l prepUnmerge5
prepUnmerge4 * * l *

prepUnmerge5 _ 8 l prepUnmerge8
prepUnmerge5 * * l *

prepUnmerge8 _ # l pullOrder1

unmerge ( # r unmerge1
unmerge $ * r reorder !
unmerge * * r *

; Look for ( or character to tell if we need to unmerge current segment
unmerge1 ( { r unmerge2
unmerge1 * * l unmerge5

; Look for first )
unmerge2 ) } l unmerge3
unmerge2 } > r *
unmerge2 * * r *

; Look for first ( or {
unmerge3 { @ r unmerge4
unmerge3 ( < r unmerge2
unmerge3 * * l *

; Reset parentheses and set up move
unmerge4 } % l move
unmerge4 < ( r *
unmerge4 > ) r *
unmerge4 * * r * 

unmerge5 # _ r *
unmerge5 ) - r *
unmerge5 _ * r unmerge
unmerge5 * * r *

reorder 9 b l reorder1
reorder ( _ l *
reorder * $ l *

reorder1 # * l reorder2
reorder1 * * l *

reorder2 _ * r finish
reorder2 * * l reorder3

reorder3 _ * r find
reorder3 * * l *

finish * _ r finish1
finish # _ r *
finish _ * r *

finish1 _ * l finish2
finish1 * * r *

finish2 $ _ r halt-accept
finish2 - _ l *
finish2 * * l *

find a _ r fa
find b _ r fb
find c _ r fc

fa a * l moveWord
fa * * r *

fb b * l moveWord
fb * * r *

fc c * l moveWord
fc * * r *

moveToFront @ _ l moveToFront1
moveToFront * * l *

moveToFront2 # * r control
moveToFront2 * * r *

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
moveToFront1 a @ r mfa
moveToFront1 b @ r mfb
moveToFront1 c @ r mfc
moveToFront1 % _ r moveToFront2

mfa # * l mfa1
mfa * * r *

mfa1 _ a l moveToFront 
mfa1 * * l *

mfb # * l mfb1
mfb * * r *

mfb1 _ b l moveToFront 
mfb1 * * l *

mfc # * l mfc1
mfc * * r *

mfc1 _ c l moveToFront 
mfc1 * * l *

writeLeft _ * l writeLeft1
writeLeft * * l *

writeLeft1 _ $ l writeLeft2
writeLeft1 # * r moveWord
writeLeft1 * * l *

writeLeft3 $ _ l writeLeft
writeLeft3 * * r *
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
writeLeft2 a * l wla
writeLeft2 b * l wlb
writeLeft2 c * l wlc

wla # * l wla1
wla * * l *

wla1 _ a r writeLeft3 
wla1 * * l *

wlb # * l wlb1
wlb * * l *

wlb1 _ b r writeLeft3 
wlb1 * * l *

wlc # * l wlc1
wlc * * l *

wlc1 _ c r writeLeft3 
wlc1 * * l *


move @ _ r move1
move * * l *

move2 $ * l control
move2 * * r *

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
move1 0 @ r m0
move1 1 @ r m1
move1 a @ r ma
move1 b @ r mb
move1 c @ r mc
move1 d @ r md
move1 o @ r mo
move1 ( @ r m(
move1 ) @ r m)
move1 % _ r move2

m0 $ * r m01
m0 * * r *

m01 _ 0 l move 
m01 * * r *

m1 $ * r m11
m1 * * r *

m11 _ 1 l move 
m11 * * r *

ma $ * r ma1
ma * * r *

ma1 _ a l move 
ma1 * * r *

mb $ * r mb1
mb * * r *

mb1 _ b l move 
mb1 * * r *

mc $ * r mc1
mc * * r *

mc1 _ c l move 
mc1 * * r *

md $ * r md1
md * * r *

md1 _ d l move 
md1 * * r *

mo $ * r mo1
mo * * r *

mo1 _ o l move 
mo1 * * r *

m( $ * r m(1
m( * * r *

m(1 _ ( l move 
m(1 * * r *

m) $ * r m)1
m) * * r *

m)1 _ ) l move 
m)1 * * r *

copy @ _ r copy1
copy * * l *

copy2 $ * l control
copy2 * * r *

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
copy1 0 @ l w0
copy1 1 @ l w1
copy1 a @ l wa
copy1 b @ l wb
copy1 c @ l wc
copy1 d @ l wd
copy1 o @ l wo
copy1 ( @ l w(
copy1 ) @ l w)
copy1 % _ r copy2

w0 _ 0 r w01

w01 $ * r w02
w01 * * r *

w02 _ 0 l copy 
w02 * * r *

w1 _ 1 r w11

w11 $ * r w12
w11 * * r *

w12 _ 1 l copy 
w12 * * r *

wa _ a r wa1

wa1 $ * r wa2
wa1 * * r *

wa2 _ a l copy 
wa2 * * r *

wb _ b r wb1

wb1 $ * r wb2
wb1 * * r *

wb2 _ b l copy 
wb2 * * r *

wc _ c r wc1

wc1 $ * r wc2
wc1 * * r *

wc2 _ c l copy 
wc2 * * r *

wd _ d r wd1

wd1 $ * r wd2
wd1 * * r *

wd2 _ d l copy 
wd2 * * r *

wo _ o r wo1

wo1 $ * r wo2
wo1 * * r *

wo2 _ o l copy 
wo2 * * r *

w( _ ( r w(1

w(1 $ * r w(2
w(1 * * r *

w(2 _ ( l copy 
w(2 * * r *

w) _ ) r w)1

w)1 $ * r w)2
w)1 * * r *

w)2 _ ) l copy 
w)2 * * r *