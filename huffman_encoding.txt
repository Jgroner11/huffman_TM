; TM that takes in set of characters and their frequencies and outputs an optimal prefix code
; Code here: https://github.com/Jgroner11/huffman_TM
;
; Input format: space separated list of pairs c1 f1 c2 f2 . . . where each fi is the frequency of character ci
;    Characters must me members of the acceptable alphabet. The current alphabet is the 26 letters of the English 
;    alphabet, uppercase and lowercase, and all digits 0-9.
;    Frequencies must be whole numbers represented in binary. The limiting factor in how long this program takes
;    is the size of these binary digits. To decrease run time you can divide each frequency by a factor and round.
; Output format: space separated list of pairs c1 e1 c2 e2 . . . where ei is the binary encoding for character ci
;
; Sample Inputs:
;    a 1 b 10
;      -> 1754 steps
;    x 10 y 11 z 1
;      -> 5193 steps   
;    0 10 a 110 A 111
;      -> 7866 steps
;    a 10 b 1 c 100 d 011
;      -> 12319 steps
;    a 10 b 11 Y 110 Z 10 4 10 5 1
;      -> 32370 steps
;    0 110 1 1001 2 100 3 1010 4 111 5 1100 6 1011 7 100 8 1101 9 10
;      -> 278176 steps
;

0 * * * init
* * * * halt-invalidFormat

control 1 2 r c1
control 2 _ r c2
control 3 _ r twoSmallest
control 4 5 l find~
control 5 6 r write)
control 6 7 l find~2
control 7 _ r c7
control 8 _ r unmerge
control 9 a r c9
control a _ r ca
control b * r cb

c1 _ ) r c11
c1 * * r *

c11 _ - l c12

c12 # _ r c13
c12 * * l *

c13 * * l c16
c13 ^ # r c18
c13 _ * r *

c16 _ * l c17

c17 _ # r moveWord

c18 $ * l c19
c18 * * r *

c19 _ $ l c110
c19 * _ r *

c110 # * r c111
c110 * * l *

c111 _ 3 l pullOrder

c2 _ $ l expand
c2 $ _ r *
c2 * * r *

c21 _ 1 r c22 
c21 * * r *

c22 _ $ r c23

c23 _ ( l c12

c7 _ * r c71
c7 $ _ r *
c7 * * r * 

c71 _ * r c72

c72 _ $ l c73

c73 # * r twoSmallest
c73 * * l *

c9 _ ) l c91
c9 * * r *

c91 # * r c92
c91 * * l *

c92 ( * r c93
c92 * * r *

c93 _ % l c94
c93 * * r *

c94 ) _ r copy1
c94 * * l *

ca _ 1 r ca1
ca $ _ r *
ca * * r *

ca1 _ * r ca2

ca2 _ 9 r ca3

ca3 _ $ r ca4

ca4 _ ( l ca5 

ca5 # _ r ca6
ca5 * * l *

ca6 ( * r ca7
ca6 * * r *

ca7 _ 0 l ca8
ca7 * * r *

ca8 _ * r unmerge
ca8 * * l *

cb _ - l reorder1
cb * * r *

init * * l *
init _ * l init1

init1 _ # r init2

init2 _ * r init3
init2 * * r *

init3 _ ^ r init4
init3 * * r init2

init4 _ 1 r init5

init5 _ $ r init6

init6 _ ( l writeLeft

moveWord _ @ r moveWord1

moveWord1 _ % l move
moveWord1 * * r *

pullOrder # * l pullOrder1 

pullOrder1 * * l pullOrder2
pullOrder1 _ * l *

pullOrder2 _ % r pullOrder3
pullOrder2 * * l *

pullOrder3 _ * l moveToFront1
pullOrder3 # _ l moveToFront1
pullOrder3 * * r *

expand 1 0 r expand1
expand - * r expand2
expand * * l *

expand1 _ o l expand
expand1 0 1 r *
expand1 * * r *

expand2 _ * l expand3
expand2 $ o r *
expand2 * * r *

expand3 o _ l expand4

expand4 - * r c21
expand4 * o r expand2
expand4 o * l *

twoSmallest - * r twoSmallest1
twoSmallest * * r *

twoSmallest1 _ * l twoSmallest2
twoSmallest1 * * r *

twoSmallest2 o x r twoSmallest3
twoSmallest2 - ~ r twoSmallest10
twoSmallest2 * * l *

twoSmallest3 - * r twoSmallest4
twoSmallest3 $ _ l prepUnmerge
twoSmallest3 * * r *

twoSmallest4 o x l twoSmallest5
twoSmallest4 _ ~ l twoSmallest6
twoSmallest4 x * r *

twoSmallest5 _ * l twoSmallest2
twoSmallest5 * * l *


twoSmallest6 - ~ l twoSmallest7
twoSmallest6 x o l *

twoSmallest7 _ * l twoSmallest8
twoSmallest7 * * l *

twoSmallest8 * * r twoSmallest8b
twoSmallest8 _ * l *

twoSmallest8b _ & l twoSmallest9 

twoSmallest9 - & r twoSmallest13
twoSmallest9 x o l *
twoSmallest9 o * l *

twoSmallest10 _ ~ r twoSmallest11
twoSmallest10 x o r *

twoSmallest11 - & r twoSmallest12
twoSmallest11 * * r *

twoSmallest12 _ & r twoSmallest13
twoSmallest12 * o r *

twoSmallest13 $ * l merge
twoSmallest13 - @ l twoSmallest14
twoSmallest13 * * r *

twoSmallest14 ~ * l twoSmallest15
twoSmallest14 * * l *

twoSmallest15 o x r twoSmallest16
twoSmallest15 x * l *
twoSmallest15 ~ * r twoSmallest22

twoSmallest16 @ * r twoSmallest17
twoSmallest16 * * r *

twoSmallest17 o x l twoSmallest14
twoSmallest17 _ ~ l twoSmallest18
twoSmallest17 x * r *

twoSmallest18 @ * l twoSmallest19
twoSmallest18 x o l *

twoSmallest19 & _ l twoSmallest19&
twoSmallest19 ~ & l twoSmallest19~
twoSmallest19 # * r twoSmallest20
twoSmallest19 * * l *

twoSmallest19& & - l twoSmallest19
twoSmallest19& * * l *

twoSmallest19~ ~ & l twoSmallest19
twoSmallest19~ x o l *
twoSmallest19~ o * l *

twoSmallest20 @ ~ r twoSmallest21
twoSmallest20 * * r *

twoSmallest21 ~ * r twoSmallest13
twoSmallest21 * * r *

twoSmallest22 ~ * r twoSmallest23
twoSmallest22 x o r *

twoSmallest23 @ * r twoSmallest24
twoSmallest23 * * r *

twoSmallest24 _ * l twoSmallest25
twoSmallest24 * o r *

twoSmallest25 & * l twoSmallest26
twoSmallest25 * * l *

twoSmallest26 o x r twoSmallest27
twoSmallest26 x * l *
twoSmallest26 & * r twoSmallest34

twoSmallest27 @ * r twoSmallest28
twoSmallest27 * * r *

twoSmallest28 o x l twoSmallest29
twoSmallest28 _ & l twoSmallest30
twoSmallest28 x * r *

twoSmallest29 & * l twoSmallest26
twoSmallest29 * * l *

twoSmallest30 @ * l twoSmallest31
twoSmallest30 x o l *

twoSmallest31 & _ l twoSmallest32
twoSmallest31 * * l *

twoSmallest32 & - r twoSmallest33
twoSmallest32 * o l *

twoSmallest33 @ & r twoSmallest13
twoSmallest33 * * r *

twoSmallest34 & * r twoSmallest35
twoSmallest34 x o r *

twoSmallest35 @ - r twoSmallest36
twoSmallest35 * * r *

twoSmallest36 _ * r twoSmallest13
twoSmallest36 * o r *


merge * 4 r write(

write( _ ( l find&
write( * * r *

write) _ ) r write-
write) * * r *

write- _ - l find&2

find& & * l move&
find& * * l *

find&2 & % l move&
find&2 * * l *

move& _ * r move1
move& & % l *
move& * * l *

find~ ~ * l move~
find~ * * l *

find~2 ~ % l move~
find~2 * * l *

move~ _ * r move1
move~ ~ % l *
move~ * * l *

prepUnmerge - _ r prepUnmerge1
prepUnmerge * _ l *

prepUnmerge1 _ 9 r prepUnmerge2

prepUnmerge2 _ $ r prepUnmerge3

prepUnmerge3 _ ( l prepUnmerge4

prepUnmerge4 ) * l prepUnmerge5
prepUnmerge4 * * l *

prepUnmerge5 _ 8 l prepUnmerge8
prepUnmerge5 * * l *

prepUnmerge8 _ # l pullOrder1

unmerge ( # r unmerge1
unmerge $ * r reorder
unmerge * * r *

; Look for ( or character to tell if we need to unmerge current segment
unmerge1 ( { r unmerge2
unmerge1 * * l unmerge5

; Look for first )
unmerge2 ) } l unmerge3
unmerge2 } > r *
unmerge2 * * r *

; Look for first ( or {
unmerge3 { @ r unmerge4
unmerge3 ( < r unmerge2
unmerge3 * * l *

; Reset parentheses and set up move
unmerge4 } % l move
unmerge4 < ( r *
unmerge4 > ) r *
unmerge4 * * r * 

unmerge5 # _ r *
unmerge5 ) - r *
unmerge5 _ * r unmerge
unmerge5 * * r *

reorder 9 b l reorder1
reorder ( _ l *
reorder * $ l *

reorder1 # * l reorder2
reorder1 * * l *

reorder2 _ * r finish
reorder2 * * l reorder3

reorder3 _ * r find
reorder3 * * l *

finish * _ r finish1
finish # _ r *
finish _ * r *

finish1 _ * l finish2
finish1 * * r *

finish2 $ _ r halt-accept
finish2 - _ l *
finish2 * * l *
;____________________________________________________________________________________________________________________________________________________________________________________
; Dynamically created circuits start here
move @ _ r move1
move * * l *

move2 $ * l control
move2 * * r *

move1 ( @ r m_(
move1 ) @ r m_)
move1 - @ r m_-
move1 a @ r m_a
move1 b @ r m_b
move1 c @ r m_c
move1 d @ r m_d
move1 e @ r m_e
move1 f @ r m_f
move1 g @ r m_g
move1 h @ r m_h
move1 i @ r m_i
move1 j @ r m_j
move1 k @ r m_k
move1 l @ r m_l
move1 m @ r m_m
move1 n @ r m_n
move1 o @ r m_o
move1 p @ r m_p
move1 q @ r m_q
move1 r @ r m_r
move1 s @ r m_s
move1 t @ r m_t
move1 u @ r m_u
move1 v @ r m_v
move1 w @ r m_w
move1 x @ r m_x
move1 y @ r m_y
move1 z @ r m_z
move1 A @ r m_A
move1 B @ r m_B
move1 C @ r m_C
move1 D @ r m_D
move1 E @ r m_E
move1 F @ r m_F
move1 G @ r m_G
move1 H @ r m_H
move1 I @ r m_I
move1 J @ r m_J
move1 K @ r m_K
move1 L @ r m_L
move1 M @ r m_M
move1 N @ r m_N
move1 O @ r m_O
move1 P @ r m_P
move1 Q @ r m_Q
move1 R @ r m_R
move1 S @ r m_S
move1 T @ r m_T
move1 U @ r m_U
move1 V @ r m_V
move1 W @ r m_W
move1 X @ r m_X
move1 Y @ r m_Y
move1 Z @ r m_Z
move1 0 @ r m_0
move1 1 @ r m_1
move1 2 @ r m_2
move1 3 @ r m_3
move1 4 @ r m_4
move1 5 @ r m_5
move1 6 @ r m_6
move1 7 @ r m_7
move1 8 @ r m_8
move1 9 @ r m_9
move1 % _ r move2

m_( $ * r m_(1
m_( * * r *

m_(1 _ ( l move 
m_(1 * * r *

m_) $ * r m_)1
m_) * * r *

m_)1 _ ) l move 
m_)1 * * r *

m_- $ * r m_-1
m_- * * r *

m_-1 _ - l move 
m_-1 * * r *

m_a $ * r m_a1
m_a * * r *

m_a1 _ a l move 
m_a1 * * r *

m_b $ * r m_b1
m_b * * r *

m_b1 _ b l move 
m_b1 * * r *

m_c $ * r m_c1
m_c * * r *

m_c1 _ c l move 
m_c1 * * r *

m_d $ * r m_d1
m_d * * r *

m_d1 _ d l move 
m_d1 * * r *

m_e $ * r m_e1
m_e * * r *

m_e1 _ e l move 
m_e1 * * r *

m_f $ * r m_f1
m_f * * r *

m_f1 _ f l move 
m_f1 * * r *

m_g $ * r m_g1
m_g * * r *

m_g1 _ g l move 
m_g1 * * r *

m_h $ * r m_h1
m_h * * r *

m_h1 _ h l move 
m_h1 * * r *

m_i $ * r m_i1
m_i * * r *

m_i1 _ i l move 
m_i1 * * r *

m_j $ * r m_j1
m_j * * r *

m_j1 _ j l move 
m_j1 * * r *

m_k $ * r m_k1
m_k * * r *

m_k1 _ k l move 
m_k1 * * r *

m_l $ * r m_l1
m_l * * r *

m_l1 _ l l move 
m_l1 * * r *

m_m $ * r m_m1
m_m * * r *

m_m1 _ m l move 
m_m1 * * r *

m_n $ * r m_n1
m_n * * r *

m_n1 _ n l move 
m_n1 * * r *

m_o $ * r m_o1
m_o * * r *

m_o1 _ o l move 
m_o1 * * r *

m_p $ * r m_p1
m_p * * r *

m_p1 _ p l move 
m_p1 * * r *

m_q $ * r m_q1
m_q * * r *

m_q1 _ q l move 
m_q1 * * r *

m_r $ * r m_r1
m_r * * r *

m_r1 _ r l move 
m_r1 * * r *

m_s $ * r m_s1
m_s * * r *

m_s1 _ s l move 
m_s1 * * r *

m_t $ * r m_t1
m_t * * r *

m_t1 _ t l move 
m_t1 * * r *

m_u $ * r m_u1
m_u * * r *

m_u1 _ u l move 
m_u1 * * r *

m_v $ * r m_v1
m_v * * r *

m_v1 _ v l move 
m_v1 * * r *

m_w $ * r m_w1
m_w * * r *

m_w1 _ w l move 
m_w1 * * r *

m_x $ * r m_x1
m_x * * r *

m_x1 _ x l move 
m_x1 * * r *

m_y $ * r m_y1
m_y * * r *

m_y1 _ y l move 
m_y1 * * r *

m_z $ * r m_z1
m_z * * r *

m_z1 _ z l move 
m_z1 * * r *

m_A $ * r m_A1
m_A * * r *

m_A1 _ A l move 
m_A1 * * r *

m_B $ * r m_B1
m_B * * r *

m_B1 _ B l move 
m_B1 * * r *

m_C $ * r m_C1
m_C * * r *

m_C1 _ C l move 
m_C1 * * r *

m_D $ * r m_D1
m_D * * r *

m_D1 _ D l move 
m_D1 * * r *

m_E $ * r m_E1
m_E * * r *

m_E1 _ E l move 
m_E1 * * r *

m_F $ * r m_F1
m_F * * r *

m_F1 _ F l move 
m_F1 * * r *

m_G $ * r m_G1
m_G * * r *

m_G1 _ G l move 
m_G1 * * r *

m_H $ * r m_H1
m_H * * r *

m_H1 _ H l move 
m_H1 * * r *

m_I $ * r m_I1
m_I * * r *

m_I1 _ I l move 
m_I1 * * r *

m_J $ * r m_J1
m_J * * r *

m_J1 _ J l move 
m_J1 * * r *

m_K $ * r m_K1
m_K * * r *

m_K1 _ K l move 
m_K1 * * r *

m_L $ * r m_L1
m_L * * r *

m_L1 _ L l move 
m_L1 * * r *

m_M $ * r m_M1
m_M * * r *

m_M1 _ M l move 
m_M1 * * r *

m_N $ * r m_N1
m_N * * r *

m_N1 _ N l move 
m_N1 * * r *

m_O $ * r m_O1
m_O * * r *

m_O1 _ O l move 
m_O1 * * r *

m_P $ * r m_P1
m_P * * r *

m_P1 _ P l move 
m_P1 * * r *

m_Q $ * r m_Q1
m_Q * * r *

m_Q1 _ Q l move 
m_Q1 * * r *

m_R $ * r m_R1
m_R * * r *

m_R1 _ R l move 
m_R1 * * r *

m_S $ * r m_S1
m_S * * r *

m_S1 _ S l move 
m_S1 * * r *

m_T $ * r m_T1
m_T * * r *

m_T1 _ T l move 
m_T1 * * r *

m_U $ * r m_U1
m_U * * r *

m_U1 _ U l move 
m_U1 * * r *

m_V $ * r m_V1
m_V * * r *

m_V1 _ V l move 
m_V1 * * r *

m_W $ * r m_W1
m_W * * r *

m_W1 _ W l move 
m_W1 * * r *

m_X $ * r m_X1
m_X * * r *

m_X1 _ X l move 
m_X1 * * r *

m_Y $ * r m_Y1
m_Y * * r *

m_Y1 _ Y l move 
m_Y1 * * r *

m_Z $ * r m_Z1
m_Z * * r *

m_Z1 _ Z l move 
m_Z1 * * r *

m_0 $ * r m_01
m_0 * * r *

m_01 _ 0 l move 
m_01 * * r *

m_1 $ * r m_11
m_1 * * r *

m_11 _ 1 l move 
m_11 * * r *

m_2 $ * r m_21
m_2 * * r *

m_21 _ 2 l move 
m_21 * * r *

m_3 $ * r m_31
m_3 * * r *

m_31 _ 3 l move 
m_31 * * r *

m_4 $ * r m_41
m_4 * * r *

m_41 _ 4 l move 
m_41 * * r *

m_5 $ * r m_51
m_5 * * r *

m_51 _ 5 l move 
m_51 * * r *

m_6 $ * r m_61
m_6 * * r *

m_61 _ 6 l move 
m_61 * * r *

m_7 $ * r m_71
m_7 * * r *

m_71 _ 7 l move 
m_71 * * r *

m_8 $ * r m_81
m_8 * * r *

m_81 _ 8 l move 
m_81 * * r *

m_9 $ * r m_91
m_9 * * r *

m_91 _ 9 l move 
m_91 * * r *

copy @ _ r copy1
copy * * l *

copy2 $ * l control
copy2 * * r *

copy1 ( @ l w_(
copy1 ) @ l w_)
copy1 - @ l w_-
copy1 a @ l w_a
copy1 b @ l w_b
copy1 c @ l w_c
copy1 d @ l w_d
copy1 e @ l w_e
copy1 f @ l w_f
copy1 g @ l w_g
copy1 h @ l w_h
copy1 i @ l w_i
copy1 j @ l w_j
copy1 k @ l w_k
copy1 l @ l w_l
copy1 m @ l w_m
copy1 n @ l w_n
copy1 o @ l w_o
copy1 p @ l w_p
copy1 q @ l w_q
copy1 r @ l w_r
copy1 s @ l w_s
copy1 t @ l w_t
copy1 u @ l w_u
copy1 v @ l w_v
copy1 w @ l w_w
copy1 x @ l w_x
copy1 y @ l w_y
copy1 z @ l w_z
copy1 A @ l w_A
copy1 B @ l w_B
copy1 C @ l w_C
copy1 D @ l w_D
copy1 E @ l w_E
copy1 F @ l w_F
copy1 G @ l w_G
copy1 H @ l w_H
copy1 I @ l w_I
copy1 J @ l w_J
copy1 K @ l w_K
copy1 L @ l w_L
copy1 M @ l w_M
copy1 N @ l w_N
copy1 O @ l w_O
copy1 P @ l w_P
copy1 Q @ l w_Q
copy1 R @ l w_R
copy1 S @ l w_S
copy1 T @ l w_T
copy1 U @ l w_U
copy1 V @ l w_V
copy1 W @ l w_W
copy1 X @ l w_X
copy1 Y @ l w_Y
copy1 Z @ l w_Z
copy1 0 @ l w_0
copy1 1 @ l w_1
copy1 2 @ l w_2
copy1 3 @ l w_3
copy1 4 @ l w_4
copy1 5 @ l w_5
copy1 6 @ l w_6
copy1 7 @ l w_7
copy1 8 @ l w_8
copy1 9 @ l w_9
copy1 % _ r copy2

w_( _ ( r w_(1

w_(1 $ * r w_(2
w_(1 * * r *

w_(2 _ ( l copy 
w_(2 * * r *

w_) _ ) r w_)1

w_)1 $ * r w_)2
w_)1 * * r *

w_)2 _ ) l copy 
w_)2 * * r *

w_- _ - r w_-1

w_-1 $ * r w_-2
w_-1 * * r *

w_-2 _ - l copy 
w_-2 * * r *

w_a _ a r w_a1

w_a1 $ * r w_a2
w_a1 * * r *

w_a2 _ a l copy 
w_a2 * * r *

w_b _ b r w_b1

w_b1 $ * r w_b2
w_b1 * * r *

w_b2 _ b l copy 
w_b2 * * r *

w_c _ c r w_c1

w_c1 $ * r w_c2
w_c1 * * r *

w_c2 _ c l copy 
w_c2 * * r *

w_d _ d r w_d1

w_d1 $ * r w_d2
w_d1 * * r *

w_d2 _ d l copy 
w_d2 * * r *

w_e _ e r w_e1

w_e1 $ * r w_e2
w_e1 * * r *

w_e2 _ e l copy 
w_e2 * * r *

w_f _ f r w_f1

w_f1 $ * r w_f2
w_f1 * * r *

w_f2 _ f l copy 
w_f2 * * r *

w_g _ g r w_g1

w_g1 $ * r w_g2
w_g1 * * r *

w_g2 _ g l copy 
w_g2 * * r *

w_h _ h r w_h1

w_h1 $ * r w_h2
w_h1 * * r *

w_h2 _ h l copy 
w_h2 * * r *

w_i _ i r w_i1

w_i1 $ * r w_i2
w_i1 * * r *

w_i2 _ i l copy 
w_i2 * * r *

w_j _ j r w_j1

w_j1 $ * r w_j2
w_j1 * * r *

w_j2 _ j l copy 
w_j2 * * r *

w_k _ k r w_k1

w_k1 $ * r w_k2
w_k1 * * r *

w_k2 _ k l copy 
w_k2 * * r *

w_l _ l r w_l1

w_l1 $ * r w_l2
w_l1 * * r *

w_l2 _ l l copy 
w_l2 * * r *

w_m _ m r w_m1

w_m1 $ * r w_m2
w_m1 * * r *

w_m2 _ m l copy 
w_m2 * * r *

w_n _ n r w_n1

w_n1 $ * r w_n2
w_n1 * * r *

w_n2 _ n l copy 
w_n2 * * r *

w_o _ o r w_o1

w_o1 $ * r w_o2
w_o1 * * r *

w_o2 _ o l copy 
w_o2 * * r *

w_p _ p r w_p1

w_p1 $ * r w_p2
w_p1 * * r *

w_p2 _ p l copy 
w_p2 * * r *

w_q _ q r w_q1

w_q1 $ * r w_q2
w_q1 * * r *

w_q2 _ q l copy 
w_q2 * * r *

w_r _ r r w_r1

w_r1 $ * r w_r2
w_r1 * * r *

w_r2 _ r l copy 
w_r2 * * r *

w_s _ s r w_s1

w_s1 $ * r w_s2
w_s1 * * r *

w_s2 _ s l copy 
w_s2 * * r *

w_t _ t r w_t1

w_t1 $ * r w_t2
w_t1 * * r *

w_t2 _ t l copy 
w_t2 * * r *

w_u _ u r w_u1

w_u1 $ * r w_u2
w_u1 * * r *

w_u2 _ u l copy 
w_u2 * * r *

w_v _ v r w_v1

w_v1 $ * r w_v2
w_v1 * * r *

w_v2 _ v l copy 
w_v2 * * r *

w_w _ w r w_w1

w_w1 $ * r w_w2
w_w1 * * r *

w_w2 _ w l copy 
w_w2 * * r *

w_x _ x r w_x1

w_x1 $ * r w_x2
w_x1 * * r *

w_x2 _ x l copy 
w_x2 * * r *

w_y _ y r w_y1

w_y1 $ * r w_y2
w_y1 * * r *

w_y2 _ y l copy 
w_y2 * * r *

w_z _ z r w_z1

w_z1 $ * r w_z2
w_z1 * * r *

w_z2 _ z l copy 
w_z2 * * r *

w_A _ A r w_A1

w_A1 $ * r w_A2
w_A1 * * r *

w_A2 _ A l copy 
w_A2 * * r *

w_B _ B r w_B1

w_B1 $ * r w_B2
w_B1 * * r *

w_B2 _ B l copy 
w_B2 * * r *

w_C _ C r w_C1

w_C1 $ * r w_C2
w_C1 * * r *

w_C2 _ C l copy 
w_C2 * * r *

w_D _ D r w_D1

w_D1 $ * r w_D2
w_D1 * * r *

w_D2 _ D l copy 
w_D2 * * r *

w_E _ E r w_E1

w_E1 $ * r w_E2
w_E1 * * r *

w_E2 _ E l copy 
w_E2 * * r *

w_F _ F r w_F1

w_F1 $ * r w_F2
w_F1 * * r *

w_F2 _ F l copy 
w_F2 * * r *

w_G _ G r w_G1

w_G1 $ * r w_G2
w_G1 * * r *

w_G2 _ G l copy 
w_G2 * * r *

w_H _ H r w_H1

w_H1 $ * r w_H2
w_H1 * * r *

w_H2 _ H l copy 
w_H2 * * r *

w_I _ I r w_I1

w_I1 $ * r w_I2
w_I1 * * r *

w_I2 _ I l copy 
w_I2 * * r *

w_J _ J r w_J1

w_J1 $ * r w_J2
w_J1 * * r *

w_J2 _ J l copy 
w_J2 * * r *

w_K _ K r w_K1

w_K1 $ * r w_K2
w_K1 * * r *

w_K2 _ K l copy 
w_K2 * * r *

w_L _ L r w_L1

w_L1 $ * r w_L2
w_L1 * * r *

w_L2 _ L l copy 
w_L2 * * r *

w_M _ M r w_M1

w_M1 $ * r w_M2
w_M1 * * r *

w_M2 _ M l copy 
w_M2 * * r *

w_N _ N r w_N1

w_N1 $ * r w_N2
w_N1 * * r *

w_N2 _ N l copy 
w_N2 * * r *

w_O _ O r w_O1

w_O1 $ * r w_O2
w_O1 * * r *

w_O2 _ O l copy 
w_O2 * * r *

w_P _ P r w_P1

w_P1 $ * r w_P2
w_P1 * * r *

w_P2 _ P l copy 
w_P2 * * r *

w_Q _ Q r w_Q1

w_Q1 $ * r w_Q2
w_Q1 * * r *

w_Q2 _ Q l copy 
w_Q2 * * r *

w_R _ R r w_R1

w_R1 $ * r w_R2
w_R1 * * r *

w_R2 _ R l copy 
w_R2 * * r *

w_S _ S r w_S1

w_S1 $ * r w_S2
w_S1 * * r *

w_S2 _ S l copy 
w_S2 * * r *

w_T _ T r w_T1

w_T1 $ * r w_T2
w_T1 * * r *

w_T2 _ T l copy 
w_T2 * * r *

w_U _ U r w_U1

w_U1 $ * r w_U2
w_U1 * * r *

w_U2 _ U l copy 
w_U2 * * r *

w_V _ V r w_V1

w_V1 $ * r w_V2
w_V1 * * r *

w_V2 _ V l copy 
w_V2 * * r *

w_W _ W r w_W1

w_W1 $ * r w_W2
w_W1 * * r *

w_W2 _ W l copy 
w_W2 * * r *

w_X _ X r w_X1

w_X1 $ * r w_X2
w_X1 * * r *

w_X2 _ X l copy 
w_X2 * * r *

w_Y _ Y r w_Y1

w_Y1 $ * r w_Y2
w_Y1 * * r *

w_Y2 _ Y l copy 
w_Y2 * * r *

w_Z _ Z r w_Z1

w_Z1 $ * r w_Z2
w_Z1 * * r *

w_Z2 _ Z l copy 
w_Z2 * * r *

w_0 _ 0 r w_01

w_01 $ * r w_02
w_01 * * r *

w_02 _ 0 l copy 
w_02 * * r *

w_1 _ 1 r w_11

w_11 $ * r w_12
w_11 * * r *

w_12 _ 1 l copy 
w_12 * * r *

w_2 _ 2 r w_21

w_21 $ * r w_22
w_21 * * r *

w_22 _ 2 l copy 
w_22 * * r *

w_3 _ 3 r w_31

w_31 $ * r w_32
w_31 * * r *

w_32 _ 3 l copy 
w_32 * * r *

w_4 _ 4 r w_41

w_41 $ * r w_42
w_41 * * r *

w_42 _ 4 l copy 
w_42 * * r *

w_5 _ 5 r w_51

w_51 $ * r w_52
w_51 * * r *

w_52 _ 5 l copy 
w_52 * * r *

w_6 _ 6 r w_61

w_61 $ * r w_62
w_61 * * r *

w_62 _ 6 l copy 
w_62 * * r *

w_7 _ 7 r w_71

w_71 $ * r w_72
w_71 * * r *

w_72 _ 7 l copy 
w_72 * * r *

w_8 _ 8 r w_81

w_81 $ * r w_82
w_81 * * r *

w_82 _ 8 l copy 
w_82 * * r *

w_9 _ 9 r w_91

w_91 $ * r w_92
w_91 * * r *

w_92 _ 9 l copy 
w_92 * * r *

writeLeft _ * l writeLeft1
writeLeft * * l *

writeLeft1 _ $ l writeLeft2
writeLeft1 # * r moveWord
writeLeft1 * * l *

writeLeft3 $ _ l writeLeft
writeLeft3 * * r *

writeLeft2 ( * l wl_(
writeLeft2 ) * l wl_)
writeLeft2 - * l wl_-
writeLeft2 a * l wl_a
writeLeft2 b * l wl_b
writeLeft2 c * l wl_c
writeLeft2 d * l wl_d
writeLeft2 e * l wl_e
writeLeft2 f * l wl_f
writeLeft2 g * l wl_g
writeLeft2 h * l wl_h
writeLeft2 i * l wl_i
writeLeft2 j * l wl_j
writeLeft2 k * l wl_k
writeLeft2 l * l wl_l
writeLeft2 m * l wl_m
writeLeft2 n * l wl_n
writeLeft2 o * l wl_o
writeLeft2 p * l wl_p
writeLeft2 q * l wl_q
writeLeft2 r * l wl_r
writeLeft2 s * l wl_s
writeLeft2 t * l wl_t
writeLeft2 u * l wl_u
writeLeft2 v * l wl_v
writeLeft2 w * l wl_w
writeLeft2 x * l wl_x
writeLeft2 y * l wl_y
writeLeft2 z * l wl_z
writeLeft2 A * l wl_A
writeLeft2 B * l wl_B
writeLeft2 C * l wl_C
writeLeft2 D * l wl_D
writeLeft2 E * l wl_E
writeLeft2 F * l wl_F
writeLeft2 G * l wl_G
writeLeft2 H * l wl_H
writeLeft2 I * l wl_I
writeLeft2 J * l wl_J
writeLeft2 K * l wl_K
writeLeft2 L * l wl_L
writeLeft2 M * l wl_M
writeLeft2 N * l wl_N
writeLeft2 O * l wl_O
writeLeft2 P * l wl_P
writeLeft2 Q * l wl_Q
writeLeft2 R * l wl_R
writeLeft2 S * l wl_S
writeLeft2 T * l wl_T
writeLeft2 U * l wl_U
writeLeft2 V * l wl_V
writeLeft2 W * l wl_W
writeLeft2 X * l wl_X
writeLeft2 Y * l wl_Y
writeLeft2 Z * l wl_Z
writeLeft2 0 * l wl_0
writeLeft2 1 * l wl_1
writeLeft2 2 * l wl_2
writeLeft2 3 * l wl_3
writeLeft2 4 * l wl_4
writeLeft2 5 * l wl_5
writeLeft2 6 * l wl_6
writeLeft2 7 * l wl_7
writeLeft2 8 * l wl_8
writeLeft2 9 * l wl_9

wl_( # * l wl_(1
wl_( * * l *

wl_(1 _ ( r writeLeft3 
wl_(1 * * l *

wl_) # * l wl_)1
wl_) * * l *

wl_)1 _ ) r writeLeft3 
wl_)1 * * l *

wl_- # * l wl_-1
wl_- * * l *

wl_-1 _ - r writeLeft3 
wl_-1 * * l *

wl_a # * l wl_a1
wl_a * * l *

wl_a1 _ a r writeLeft3 
wl_a1 * * l *

wl_b # * l wl_b1
wl_b * * l *

wl_b1 _ b r writeLeft3 
wl_b1 * * l *

wl_c # * l wl_c1
wl_c * * l *

wl_c1 _ c r writeLeft3 
wl_c1 * * l *

wl_d # * l wl_d1
wl_d * * l *

wl_d1 _ d r writeLeft3 
wl_d1 * * l *

wl_e # * l wl_e1
wl_e * * l *

wl_e1 _ e r writeLeft3 
wl_e1 * * l *

wl_f # * l wl_f1
wl_f * * l *

wl_f1 _ f r writeLeft3 
wl_f1 * * l *

wl_g # * l wl_g1
wl_g * * l *

wl_g1 _ g r writeLeft3 
wl_g1 * * l *

wl_h # * l wl_h1
wl_h * * l *

wl_h1 _ h r writeLeft3 
wl_h1 * * l *

wl_i # * l wl_i1
wl_i * * l *

wl_i1 _ i r writeLeft3 
wl_i1 * * l *

wl_j # * l wl_j1
wl_j * * l *

wl_j1 _ j r writeLeft3 
wl_j1 * * l *

wl_k # * l wl_k1
wl_k * * l *

wl_k1 _ k r writeLeft3 
wl_k1 * * l *

wl_l # * l wl_l1
wl_l * * l *

wl_l1 _ l r writeLeft3 
wl_l1 * * l *

wl_m # * l wl_m1
wl_m * * l *

wl_m1 _ m r writeLeft3 
wl_m1 * * l *

wl_n # * l wl_n1
wl_n * * l *

wl_n1 _ n r writeLeft3 
wl_n1 * * l *

wl_o # * l wl_o1
wl_o * * l *

wl_o1 _ o r writeLeft3 
wl_o1 * * l *

wl_p # * l wl_p1
wl_p * * l *

wl_p1 _ p r writeLeft3 
wl_p1 * * l *

wl_q # * l wl_q1
wl_q * * l *

wl_q1 _ q r writeLeft3 
wl_q1 * * l *

wl_r # * l wl_r1
wl_r * * l *

wl_r1 _ r r writeLeft3 
wl_r1 * * l *

wl_s # * l wl_s1
wl_s * * l *

wl_s1 _ s r writeLeft3 
wl_s1 * * l *

wl_t # * l wl_t1
wl_t * * l *

wl_t1 _ t r writeLeft3 
wl_t1 * * l *

wl_u # * l wl_u1
wl_u * * l *

wl_u1 _ u r writeLeft3 
wl_u1 * * l *

wl_v # * l wl_v1
wl_v * * l *

wl_v1 _ v r writeLeft3 
wl_v1 * * l *

wl_w # * l wl_w1
wl_w * * l *

wl_w1 _ w r writeLeft3 
wl_w1 * * l *

wl_x # * l wl_x1
wl_x * * l *

wl_x1 _ x r writeLeft3 
wl_x1 * * l *

wl_y # * l wl_y1
wl_y * * l *

wl_y1 _ y r writeLeft3 
wl_y1 * * l *

wl_z # * l wl_z1
wl_z * * l *

wl_z1 _ z r writeLeft3 
wl_z1 * * l *

wl_A # * l wl_A1
wl_A * * l *

wl_A1 _ A r writeLeft3 
wl_A1 * * l *

wl_B # * l wl_B1
wl_B * * l *

wl_B1 _ B r writeLeft3 
wl_B1 * * l *

wl_C # * l wl_C1
wl_C * * l *

wl_C1 _ C r writeLeft3 
wl_C1 * * l *

wl_D # * l wl_D1
wl_D * * l *

wl_D1 _ D r writeLeft3 
wl_D1 * * l *

wl_E # * l wl_E1
wl_E * * l *

wl_E1 _ E r writeLeft3 
wl_E1 * * l *

wl_F # * l wl_F1
wl_F * * l *

wl_F1 _ F r writeLeft3 
wl_F1 * * l *

wl_G # * l wl_G1
wl_G * * l *

wl_G1 _ G r writeLeft3 
wl_G1 * * l *

wl_H # * l wl_H1
wl_H * * l *

wl_H1 _ H r writeLeft3 
wl_H1 * * l *

wl_I # * l wl_I1
wl_I * * l *

wl_I1 _ I r writeLeft3 
wl_I1 * * l *

wl_J # * l wl_J1
wl_J * * l *

wl_J1 _ J r writeLeft3 
wl_J1 * * l *

wl_K # * l wl_K1
wl_K * * l *

wl_K1 _ K r writeLeft3 
wl_K1 * * l *

wl_L # * l wl_L1
wl_L * * l *

wl_L1 _ L r writeLeft3 
wl_L1 * * l *

wl_M # * l wl_M1
wl_M * * l *

wl_M1 _ M r writeLeft3 
wl_M1 * * l *

wl_N # * l wl_N1
wl_N * * l *

wl_N1 _ N r writeLeft3 
wl_N1 * * l *

wl_O # * l wl_O1
wl_O * * l *

wl_O1 _ O r writeLeft3 
wl_O1 * * l *

wl_P # * l wl_P1
wl_P * * l *

wl_P1 _ P r writeLeft3 
wl_P1 * * l *

wl_Q # * l wl_Q1
wl_Q * * l *

wl_Q1 _ Q r writeLeft3 
wl_Q1 * * l *

wl_R # * l wl_R1
wl_R * * l *

wl_R1 _ R r writeLeft3 
wl_R1 * * l *

wl_S # * l wl_S1
wl_S * * l *

wl_S1 _ S r writeLeft3 
wl_S1 * * l *

wl_T # * l wl_T1
wl_T * * l *

wl_T1 _ T r writeLeft3 
wl_T1 * * l *

wl_U # * l wl_U1
wl_U * * l *

wl_U1 _ U r writeLeft3 
wl_U1 * * l *

wl_V # * l wl_V1
wl_V * * l *

wl_V1 _ V r writeLeft3 
wl_V1 * * l *

wl_W # * l wl_W1
wl_W * * l *

wl_W1 _ W r writeLeft3 
wl_W1 * * l *

wl_X # * l wl_X1
wl_X * * l *

wl_X1 _ X r writeLeft3 
wl_X1 * * l *

wl_Y # * l wl_Y1
wl_Y * * l *

wl_Y1 _ Y r writeLeft3 
wl_Y1 * * l *

wl_Z # * l wl_Z1
wl_Z * * l *

wl_Z1 _ Z r writeLeft3 
wl_Z1 * * l *

wl_0 # * l wl_01
wl_0 * * l *

wl_01 _ 0 r writeLeft3 
wl_01 * * l *

wl_1 # * l wl_11
wl_1 * * l *

wl_11 _ 1 r writeLeft3 
wl_11 * * l *

wl_2 # * l wl_21
wl_2 * * l *

wl_21 _ 2 r writeLeft3 
wl_21 * * l *

wl_3 # * l wl_31
wl_3 * * l *

wl_31 _ 3 r writeLeft3 
wl_31 * * l *

wl_4 # * l wl_41
wl_4 * * l *

wl_41 _ 4 r writeLeft3 
wl_41 * * l *

wl_5 # * l wl_51
wl_5 * * l *

wl_51 _ 5 r writeLeft3 
wl_51 * * l *

wl_6 # * l wl_61
wl_6 * * l *

wl_61 _ 6 r writeLeft3 
wl_61 * * l *

wl_7 # * l wl_71
wl_7 * * l *

wl_71 _ 7 r writeLeft3 
wl_71 * * l *

wl_8 # * l wl_81
wl_8 * * l *

wl_81 _ 8 r writeLeft3 
wl_81 * * l *

wl_9 # * l wl_91
wl_9 * * l *

wl_91 _ 9 r writeLeft3 
wl_91 * * l *

moveToFront @ _ l moveToFront1
moveToFront * * l *

moveToFront2 # * r control
moveToFront2 * * r *

moveToFront1 ( @ r mf_(
moveToFront1 ) @ r mf_)
moveToFront1 - @ r mf_-
moveToFront1 a @ r mf_a
moveToFront1 b @ r mf_b
moveToFront1 c @ r mf_c
moveToFront1 d @ r mf_d
moveToFront1 e @ r mf_e
moveToFront1 f @ r mf_f
moveToFront1 g @ r mf_g
moveToFront1 h @ r mf_h
moveToFront1 i @ r mf_i
moveToFront1 j @ r mf_j
moveToFront1 k @ r mf_k
moveToFront1 l @ r mf_l
moveToFront1 m @ r mf_m
moveToFront1 n @ r mf_n
moveToFront1 o @ r mf_o
moveToFront1 p @ r mf_p
moveToFront1 q @ r mf_q
moveToFront1 r @ r mf_r
moveToFront1 s @ r mf_s
moveToFront1 t @ r mf_t
moveToFront1 u @ r mf_u
moveToFront1 v @ r mf_v
moveToFront1 w @ r mf_w
moveToFront1 x @ r mf_x
moveToFront1 y @ r mf_y
moveToFront1 z @ r mf_z
moveToFront1 A @ r mf_A
moveToFront1 B @ r mf_B
moveToFront1 C @ r mf_C
moveToFront1 D @ r mf_D
moveToFront1 E @ r mf_E
moveToFront1 F @ r mf_F
moveToFront1 G @ r mf_G
moveToFront1 H @ r mf_H
moveToFront1 I @ r mf_I
moveToFront1 J @ r mf_J
moveToFront1 K @ r mf_K
moveToFront1 L @ r mf_L
moveToFront1 M @ r mf_M
moveToFront1 N @ r mf_N
moveToFront1 O @ r mf_O
moveToFront1 P @ r mf_P
moveToFront1 Q @ r mf_Q
moveToFront1 R @ r mf_R
moveToFront1 S @ r mf_S
moveToFront1 T @ r mf_T
moveToFront1 U @ r mf_U
moveToFront1 V @ r mf_V
moveToFront1 W @ r mf_W
moveToFront1 X @ r mf_X
moveToFront1 Y @ r mf_Y
moveToFront1 Z @ r mf_Z
moveToFront1 0 @ r mf_0
moveToFront1 1 @ r mf_1
moveToFront1 2 @ r mf_2
moveToFront1 3 @ r mf_3
moveToFront1 4 @ r mf_4
moveToFront1 5 @ r mf_5
moveToFront1 6 @ r mf_6
moveToFront1 7 @ r mf_7
moveToFront1 8 @ r mf_8
moveToFront1 9 @ r mf_9
moveToFront1 % _ r moveToFront2

mf_( # * l mf_(1
mf_( * * r *

mf_(1 _ ( l moveToFront 
mf_(1 * * l *

mf_) # * l mf_)1
mf_) * * r *

mf_)1 _ ) l moveToFront 
mf_)1 * * l *

mf_- # * l mf_-1
mf_- * * r *

mf_-1 _ - l moveToFront 
mf_-1 * * l *

mf_a # * l mf_a1
mf_a * * r *

mf_a1 _ a l moveToFront 
mf_a1 * * l *

mf_b # * l mf_b1
mf_b * * r *

mf_b1 _ b l moveToFront 
mf_b1 * * l *

mf_c # * l mf_c1
mf_c * * r *

mf_c1 _ c l moveToFront 
mf_c1 * * l *

mf_d # * l mf_d1
mf_d * * r *

mf_d1 _ d l moveToFront 
mf_d1 * * l *

mf_e # * l mf_e1
mf_e * * r *

mf_e1 _ e l moveToFront 
mf_e1 * * l *

mf_f # * l mf_f1
mf_f * * r *

mf_f1 _ f l moveToFront 
mf_f1 * * l *

mf_g # * l mf_g1
mf_g * * r *

mf_g1 _ g l moveToFront 
mf_g1 * * l *

mf_h # * l mf_h1
mf_h * * r *

mf_h1 _ h l moveToFront 
mf_h1 * * l *

mf_i # * l mf_i1
mf_i * * r *

mf_i1 _ i l moveToFront 
mf_i1 * * l *

mf_j # * l mf_j1
mf_j * * r *

mf_j1 _ j l moveToFront 
mf_j1 * * l *

mf_k # * l mf_k1
mf_k * * r *

mf_k1 _ k l moveToFront 
mf_k1 * * l *

mf_l # * l mf_l1
mf_l * * r *

mf_l1 _ l l moveToFront 
mf_l1 * * l *

mf_m # * l mf_m1
mf_m * * r *

mf_m1 _ m l moveToFront 
mf_m1 * * l *

mf_n # * l mf_n1
mf_n * * r *

mf_n1 _ n l moveToFront 
mf_n1 * * l *

mf_o # * l mf_o1
mf_o * * r *

mf_o1 _ o l moveToFront 
mf_o1 * * l *

mf_p # * l mf_p1
mf_p * * r *

mf_p1 _ p l moveToFront 
mf_p1 * * l *

mf_q # * l mf_q1
mf_q * * r *

mf_q1 _ q l moveToFront 
mf_q1 * * l *

mf_r # * l mf_r1
mf_r * * r *

mf_r1 _ r l moveToFront 
mf_r1 * * l *

mf_s # * l mf_s1
mf_s * * r *

mf_s1 _ s l moveToFront 
mf_s1 * * l *

mf_t # * l mf_t1
mf_t * * r *

mf_t1 _ t l moveToFront 
mf_t1 * * l *

mf_u # * l mf_u1
mf_u * * r *

mf_u1 _ u l moveToFront 
mf_u1 * * l *

mf_v # * l mf_v1
mf_v * * r *

mf_v1 _ v l moveToFront 
mf_v1 * * l *

mf_w # * l mf_w1
mf_w * * r *

mf_w1 _ w l moveToFront 
mf_w1 * * l *

mf_x # * l mf_x1
mf_x * * r *

mf_x1 _ x l moveToFront 
mf_x1 * * l *

mf_y # * l mf_y1
mf_y * * r *

mf_y1 _ y l moveToFront 
mf_y1 * * l *

mf_z # * l mf_z1
mf_z * * r *

mf_z1 _ z l moveToFront 
mf_z1 * * l *

mf_A # * l mf_A1
mf_A * * r *

mf_A1 _ A l moveToFront 
mf_A1 * * l *

mf_B # * l mf_B1
mf_B * * r *

mf_B1 _ B l moveToFront 
mf_B1 * * l *

mf_C # * l mf_C1
mf_C * * r *

mf_C1 _ C l moveToFront 
mf_C1 * * l *

mf_D # * l mf_D1
mf_D * * r *

mf_D1 _ D l moveToFront 
mf_D1 * * l *

mf_E # * l mf_E1
mf_E * * r *

mf_E1 _ E l moveToFront 
mf_E1 * * l *

mf_F # * l mf_F1
mf_F * * r *

mf_F1 _ F l moveToFront 
mf_F1 * * l *

mf_G # * l mf_G1
mf_G * * r *

mf_G1 _ G l moveToFront 
mf_G1 * * l *

mf_H # * l mf_H1
mf_H * * r *

mf_H1 _ H l moveToFront 
mf_H1 * * l *

mf_I # * l mf_I1
mf_I * * r *

mf_I1 _ I l moveToFront 
mf_I1 * * l *

mf_J # * l mf_J1
mf_J * * r *

mf_J1 _ J l moveToFront 
mf_J1 * * l *

mf_K # * l mf_K1
mf_K * * r *

mf_K1 _ K l moveToFront 
mf_K1 * * l *

mf_L # * l mf_L1
mf_L * * r *

mf_L1 _ L l moveToFront 
mf_L1 * * l *

mf_M # * l mf_M1
mf_M * * r *

mf_M1 _ M l moveToFront 
mf_M1 * * l *

mf_N # * l mf_N1
mf_N * * r *

mf_N1 _ N l moveToFront 
mf_N1 * * l *

mf_O # * l mf_O1
mf_O * * r *

mf_O1 _ O l moveToFront 
mf_O1 * * l *

mf_P # * l mf_P1
mf_P * * r *

mf_P1 _ P l moveToFront 
mf_P1 * * l *

mf_Q # * l mf_Q1
mf_Q * * r *

mf_Q1 _ Q l moveToFront 
mf_Q1 * * l *

mf_R # * l mf_R1
mf_R * * r *

mf_R1 _ R l moveToFront 
mf_R1 * * l *

mf_S # * l mf_S1
mf_S * * r *

mf_S1 _ S l moveToFront 
mf_S1 * * l *

mf_T # * l mf_T1
mf_T * * r *

mf_T1 _ T l moveToFront 
mf_T1 * * l *

mf_U # * l mf_U1
mf_U * * r *

mf_U1 _ U l moveToFront 
mf_U1 * * l *

mf_V # * l mf_V1
mf_V * * r *

mf_V1 _ V l moveToFront 
mf_V1 * * l *

mf_W # * l mf_W1
mf_W * * r *

mf_W1 _ W l moveToFront 
mf_W1 * * l *

mf_X # * l mf_X1
mf_X * * r *

mf_X1 _ X l moveToFront 
mf_X1 * * l *

mf_Y # * l mf_Y1
mf_Y * * r *

mf_Y1 _ Y l moveToFront 
mf_Y1 * * l *

mf_Z # * l mf_Z1
mf_Z * * r *

mf_Z1 _ Z l moveToFront 
mf_Z1 * * l *

mf_0 # * l mf_01
mf_0 * * r *

mf_01 _ 0 l moveToFront 
mf_01 * * l *

mf_1 # * l mf_11
mf_1 * * r *

mf_11 _ 1 l moveToFront 
mf_11 * * l *

mf_2 # * l mf_21
mf_2 * * r *

mf_21 _ 2 l moveToFront 
mf_21 * * l *

mf_3 # * l mf_31
mf_3 * * r *

mf_31 _ 3 l moveToFront 
mf_31 * * l *

mf_4 # * l mf_41
mf_4 * * r *

mf_41 _ 4 l moveToFront 
mf_41 * * l *

mf_5 # * l mf_51
mf_5 * * r *

mf_51 _ 5 l moveToFront 
mf_51 * * l *

mf_6 # * l mf_61
mf_6 * * r *

mf_61 _ 6 l moveToFront 
mf_61 * * l *

mf_7 # * l mf_71
mf_7 * * r *

mf_71 _ 7 l moveToFront 
mf_71 * * l *

mf_8 # * l mf_81
mf_8 * * r *

mf_81 _ 8 l moveToFront 
mf_81 * * l *

mf_9 # * l mf_91
mf_9 * * r *

mf_91 _ 9 l moveToFront 
mf_91 * * l *

find ( _ r f_(
find ) _ r f_)
find - _ r f_-
find a _ r f_a
find b _ r f_b
find c _ r f_c
find d _ r f_d
find e _ r f_e
find f _ r f_f
find g _ r f_g
find h _ r f_h
find i _ r f_i
find j _ r f_j
find k _ r f_k
find l _ r f_l
find m _ r f_m
find n _ r f_n
find o _ r f_o
find p _ r f_p
find q _ r f_q
find r _ r f_r
find s _ r f_s
find t _ r f_t
find u _ r f_u
find v _ r f_v
find w _ r f_w
find x _ r f_x
find y _ r f_y
find z _ r f_z
find A _ r f_A
find B _ r f_B
find C _ r f_C
find D _ r f_D
find E _ r f_E
find F _ r f_F
find G _ r f_G
find H _ r f_H
find I _ r f_I
find J _ r f_J
find K _ r f_K
find L _ r f_L
find M _ r f_M
find N _ r f_N
find O _ r f_O
find P _ r f_P
find Q _ r f_Q
find R _ r f_R
find S _ r f_S
find T _ r f_T
find U _ r f_U
find V _ r f_V
find W _ r f_W
find X _ r f_X
find Y _ r f_Y
find Z _ r f_Z
find 0 _ r f_0
find 1 _ r f_1
find 2 _ r f_2
find 3 _ r f_3
find 4 _ r f_4
find 5 _ r f_5
find 6 _ r f_6
find 7 _ r f_7
find 8 _ r f_8
find 9 _ r f_9

f_( ( * l moveWord
f_( * * r f_(1
f_( _ * r *

f_(1 _ * r f_(
f_(1 * * r *

f_) ) * l moveWord
f_) * * r f_)1
f_) _ * r *

f_)1 _ * r f_)
f_)1 * * r *

f_- - * l moveWord
f_- * * r f_-1
f_- _ * r *

f_-1 _ * r f_-
f_-1 * * r *

f_a a * l moveWord
f_a * * r f_a1
f_a _ * r *

f_a1 _ * r f_a
f_a1 * * r *

f_b b * l moveWord
f_b * * r f_b1
f_b _ * r *

f_b1 _ * r f_b
f_b1 * * r *

f_c c * l moveWord
f_c * * r f_c1
f_c _ * r *

f_c1 _ * r f_c
f_c1 * * r *

f_d d * l moveWord
f_d * * r f_d1
f_d _ * r *

f_d1 _ * r f_d
f_d1 * * r *

f_e e * l moveWord
f_e * * r f_e1
f_e _ * r *

f_e1 _ * r f_e
f_e1 * * r *

f_f f * l moveWord
f_f * * r f_f1
f_f _ * r *

f_f1 _ * r f_f
f_f1 * * r *

f_g g * l moveWord
f_g * * r f_g1
f_g _ * r *

f_g1 _ * r f_g
f_g1 * * r *

f_h h * l moveWord
f_h * * r f_h1
f_h _ * r *

f_h1 _ * r f_h
f_h1 * * r *

f_i i * l moveWord
f_i * * r f_i1
f_i _ * r *

f_i1 _ * r f_i
f_i1 * * r *

f_j j * l moveWord
f_j * * r f_j1
f_j _ * r *

f_j1 _ * r f_j
f_j1 * * r *

f_k k * l moveWord
f_k * * r f_k1
f_k _ * r *

f_k1 _ * r f_k
f_k1 * * r *

f_l l * l moveWord
f_l * * r f_l1
f_l _ * r *

f_l1 _ * r f_l
f_l1 * * r *

f_m m * l moveWord
f_m * * r f_m1
f_m _ * r *

f_m1 _ * r f_m
f_m1 * * r *

f_n n * l moveWord
f_n * * r f_n1
f_n _ * r *

f_n1 _ * r f_n
f_n1 * * r *

f_o o * l moveWord
f_o * * r f_o1
f_o _ * r *

f_o1 _ * r f_o
f_o1 * * r *

f_p p * l moveWord
f_p * * r f_p1
f_p _ * r *

f_p1 _ * r f_p
f_p1 * * r *

f_q q * l moveWord
f_q * * r f_q1
f_q _ * r *

f_q1 _ * r f_q
f_q1 * * r *

f_r r * l moveWord
f_r * * r f_r1
f_r _ * r *

f_r1 _ * r f_r
f_r1 * * r *

f_s s * l moveWord
f_s * * r f_s1
f_s _ * r *

f_s1 _ * r f_s
f_s1 * * r *

f_t t * l moveWord
f_t * * r f_t1
f_t _ * r *

f_t1 _ * r f_t
f_t1 * * r *

f_u u * l moveWord
f_u * * r f_u1
f_u _ * r *

f_u1 _ * r f_u
f_u1 * * r *

f_v v * l moveWord
f_v * * r f_v1
f_v _ * r *

f_v1 _ * r f_v
f_v1 * * r *

f_w w * l moveWord
f_w * * r f_w1
f_w _ * r *

f_w1 _ * r f_w
f_w1 * * r *

f_x x * l moveWord
f_x * * r f_x1
f_x _ * r *

f_x1 _ * r f_x
f_x1 * * r *

f_y y * l moveWord
f_y * * r f_y1
f_y _ * r *

f_y1 _ * r f_y
f_y1 * * r *

f_z z * l moveWord
f_z * * r f_z1
f_z _ * r *

f_z1 _ * r f_z
f_z1 * * r *

f_A A * l moveWord
f_A * * r f_A1
f_A _ * r *

f_A1 _ * r f_A
f_A1 * * r *

f_B B * l moveWord
f_B * * r f_B1
f_B _ * r *

f_B1 _ * r f_B
f_B1 * * r *

f_C C * l moveWord
f_C * * r f_C1
f_C _ * r *

f_C1 _ * r f_C
f_C1 * * r *

f_D D * l moveWord
f_D * * r f_D1
f_D _ * r *

f_D1 _ * r f_D
f_D1 * * r *

f_E E * l moveWord
f_E * * r f_E1
f_E _ * r *

f_E1 _ * r f_E
f_E1 * * r *

f_F F * l moveWord
f_F * * r f_F1
f_F _ * r *

f_F1 _ * r f_F
f_F1 * * r *

f_G G * l moveWord
f_G * * r f_G1
f_G _ * r *

f_G1 _ * r f_G
f_G1 * * r *

f_H H * l moveWord
f_H * * r f_H1
f_H _ * r *

f_H1 _ * r f_H
f_H1 * * r *

f_I I * l moveWord
f_I * * r f_I1
f_I _ * r *

f_I1 _ * r f_I
f_I1 * * r *

f_J J * l moveWord
f_J * * r f_J1
f_J _ * r *

f_J1 _ * r f_J
f_J1 * * r *

f_K K * l moveWord
f_K * * r f_K1
f_K _ * r *

f_K1 _ * r f_K
f_K1 * * r *

f_L L * l moveWord
f_L * * r f_L1
f_L _ * r *

f_L1 _ * r f_L
f_L1 * * r *

f_M M * l moveWord
f_M * * r f_M1
f_M _ * r *

f_M1 _ * r f_M
f_M1 * * r *

f_N N * l moveWord
f_N * * r f_N1
f_N _ * r *

f_N1 _ * r f_N
f_N1 * * r *

f_O O * l moveWord
f_O * * r f_O1
f_O _ * r *

f_O1 _ * r f_O
f_O1 * * r *

f_P P * l moveWord
f_P * * r f_P1
f_P _ * r *

f_P1 _ * r f_P
f_P1 * * r *

f_Q Q * l moveWord
f_Q * * r f_Q1
f_Q _ * r *

f_Q1 _ * r f_Q
f_Q1 * * r *

f_R R * l moveWord
f_R * * r f_R1
f_R _ * r *

f_R1 _ * r f_R
f_R1 * * r *

f_S S * l moveWord
f_S * * r f_S1
f_S _ * r *

f_S1 _ * r f_S
f_S1 * * r *

f_T T * l moveWord
f_T * * r f_T1
f_T _ * r *

f_T1 _ * r f_T
f_T1 * * r *

f_U U * l moveWord
f_U * * r f_U1
f_U _ * r *

f_U1 _ * r f_U
f_U1 * * r *

f_V V * l moveWord
f_V * * r f_V1
f_V _ * r *

f_V1 _ * r f_V
f_V1 * * r *

f_W W * l moveWord
f_W * * r f_W1
f_W _ * r *

f_W1 _ * r f_W
f_W1 * * r *

f_X X * l moveWord
f_X * * r f_X1
f_X _ * r *

f_X1 _ * r f_X
f_X1 * * r *

f_Y Y * l moveWord
f_Y * * r f_Y1
f_Y _ * r *

f_Y1 _ * r f_Y
f_Y1 * * r *

f_Z Z * l moveWord
f_Z * * r f_Z1
f_Z _ * r *

f_Z1 _ * r f_Z
f_Z1 * * r *

f_0 0 * l moveWord
f_0 * * r f_01
f_0 _ * r *

f_01 _ * r f_0
f_01 * * r *

f_1 1 * l moveWord
f_1 * * r f_11
f_1 _ * r *

f_11 _ * r f_1
f_11 * * r *

f_2 2 * l moveWord
f_2 * * r f_21
f_2 _ * r *

f_21 _ * r f_2
f_21 * * r *

f_3 3 * l moveWord
f_3 * * r f_31
f_3 _ * r *

f_31 _ * r f_3
f_31 * * r *

f_4 4 * l moveWord
f_4 * * r f_41
f_4 _ * r *

f_41 _ * r f_4
f_41 * * r *

f_5 5 * l moveWord
f_5 * * r f_51
f_5 _ * r *

f_51 _ * r f_5
f_51 * * r *

f_6 6 * l moveWord
f_6 * * r f_61
f_6 _ * r *

f_61 _ * r f_6
f_61 * * r *

f_7 7 * l moveWord
f_7 * * r f_71
f_7 _ * r *

f_71 _ * r f_7
f_71 * * r *

f_8 8 * l moveWord
f_8 * * r f_81
f_8 _ * r *

f_81 _ * r f_8
f_81 * * r *

f_9 9 * l moveWord
f_9 * * r f_91
f_9 _ * r *

f_91 _ * r f_9
f_91 * * r *
